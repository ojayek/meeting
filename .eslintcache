[{"E:\\Moshanir\\meeting\\src\\App.js":"1","E:\\Moshanir\\meeting\\src\\index.js":"2","E:\\Moshanir\\meeting\\src\\Component\\NotFound.js":"3","E:\\Moshanir\\meeting\\src\\Component\\Common\\Loader.js":"4","E:\\Moshanir\\meeting\\src\\Component\\Home.js":"5","E:\\Moshanir\\meeting\\src\\Component\\CreateSummaryOfMeeting.js":"6","E:\\Moshanir\\meeting\\src\\Component\\Common\\CustomTable.js":"7","E:\\Moshanir\\meeting\\src\\Component\\Common\\Columns.js":"8","E:\\Moshanir\\meeting\\src\\Context\\meetingContext.js":"9","E:\\Moshanir\\meeting\\src\\Context\\meetingState.js":"10","E:\\Moshanir\\meeting\\src\\Constant\\constant.js":"11","E:\\Moshanir\\meeting\\src\\Context\\meetingReducer.js":"12","E:\\Moshanir\\meeting\\src\\Context\\types.js":"13"},{"size":861,"mtime":1613639403777,"results":"14","hashOfConfig":"15"},{"size":491,"mtime":1611218275846,"results":"16","hashOfConfig":"15"},{"size":286,"mtime":1606564027453,"results":"17","hashOfConfig":"15"},{"size":258,"mtime":1611992699555,"results":"18","hashOfConfig":"15"},{"size":271,"mtime":1611220012920,"results":"19","hashOfConfig":"15"},{"size":18832,"mtime":1613640831696,"results":"20","hashOfConfig":"15"},{"size":14501,"mtime":1609588122759,"results":"21","hashOfConfig":"15"},{"size":475,"mtime":1611827035123,"results":"22","hashOfConfig":"15"},{"size":117,"mtime":1613639207246,"results":"23","hashOfConfig":"15"},{"size":4501,"mtime":1613641226409,"results":"24","hashOfConfig":"15"},{"size":191,"mtime":1613639755334,"results":"25","hashOfConfig":"15"},{"size":1932,"mtime":1613638311797,"results":"26","hashOfConfig":"15"},{"size":750,"mtime":1613635221087,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"lgxdya",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"E:\\Moshanir\\meeting\\src\\App.js",["58"],"E:\\Moshanir\\meeting\\src\\index.js",[],["59","60"],"E:\\Moshanir\\meeting\\src\\Component\\NotFound.js",[],"E:\\Moshanir\\meeting\\src\\Component\\Common\\Loader.js",["61"],"import React from 'react';\r\nimport spinner from '../../images/spinner.gif';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div>\r\n      \r\n      <img src={spinner} className='card bg-info text-center card-form' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","E:\\Moshanir\\meeting\\src\\Component\\Home.js",[],"E:\\Moshanir\\meeting\\src\\Component\\CreateSummaryOfMeeting.js",["62","63","64","65","66"],"import React, { useMemo, useState, useContext } from 'react';\r\n// import { Calendar, DatePicker } from 'react-persian-datepicker';\r\nimport CustomTable from './Common/CustomTable';\r\nimport MeetingContext from '../Context/meetingContext';\r\nimport { TitleColumns } from './Common/Columns';\r\nimport 'react-modern-calendar-datepicker/lib/DatePicker.css';\r\nimport '../css/KiarashDatePicker/responsiveDatePicker.css';\r\nimport DatePicker from 'react-modern-calendar-datepicker';\r\nimport { utils } from 'react-modern-calendar-datepicker';\r\n\r\nconst CreateSummaryOfMeeting = () => {\r\n  const [meetingDate, setMeetingDate] = useState(null);\r\n  const [Titel, setTitle] = useState(null);\r\n  const [MeetingNumber, setMeetingNumber] = useState(null);\r\n  const [InnerParticipator, setInnerParticipator] = useState(null);\r\n  const [Location, setLocation] = useState(null);\r\n\r\n  const [endDate, setEndDate] = useState(null);\r\n  const [endDateEdit, setEndDateEdit] = useState(null);\r\n  const [selectedRow, setSelectedRow] = useState('');\r\n  const [showData, setShowData] = useState(false);\r\n  const [meetingSubTitle, setMeetingSubTitle] = useState('');\r\n  const [id, setId] = useState(null);\r\n  const [tracingResponsible, setTracingResponsible] = useState('');\r\n  const [subjectEdit, setSubjectEdit] = useState('');\r\n  const [tracingResponsibleEdit, setTracingResponsibleEdit] = useState('');\r\n  const [contactlist, setContactList] = useState([]);\r\n  const persianToday = utils('fa').getToday(); // { year: 1399, month: 11, day: 9 }\r\n\r\n  const meetingContext = useContext(MeetingContext);\r\n\r\n  const {\r\n    createOrUpdateMeeting,\r\n    // GetMeetingList,\r\n    // setCreateMeetingToNull,\r\n    // showModal,\r\n    // showLoader,\r\n    // error,\r\n  } = meetingContext;\r\n\r\n  const setSelectedRowData = (row) => {\r\n    setSelectedRow(row.original);\r\n    // console.log(row.original);\r\n    if (row.original.DirectPhoneNo) {\r\n      // setDirectPhoneNo(row.original.DirectPhoneNo);\r\n    }\r\n    if (row.original.Tel) {\r\n      // setTel(row.original.Tel);\r\n    }\r\n  };\r\n  const kartableActionsAdmin = {\r\n    Header: 'عملیات',\r\n    columns: [\r\n      {\r\n        Header: '.',\r\n        Cell: ({ row }) => (\r\n          <div className='Operations'>\r\n            <button\r\n              type='button'\r\n              className='editBtn'\r\n              data-toggle='modal'\r\n              data-target='.modal21'\r\n              onClick={(e) => {\r\n                console.log('rowdata is:', row);\r\n                setSubjectEdit(row.original.Subject);\r\n                setEndDateEdit(row.original.endDate);\r\n                setTracingResponsibleEdit(row.original.tracingResponsible);\r\n                setId(row.original.id);\r\n              }}\r\n            >\r\n              ویرایش\r\n            </button>\r\n            <button\r\n              type='button'\r\n              className='editBtn'\r\n              onClick={(e) => {\r\n                console.log('row.id', row.id, row);\r\n                let filterList = contactlist.filter(\r\n                  (o) => o.id !== row.original.id\r\n                );\r\n                console.log('filterData', filterList);\r\n                setTimeout(() => {\r\n                  setShowData(false);\r\n                  setContactList(filterList);\r\n                }, 1);\r\n                setTimeout(() => {\r\n                  if (contactlist.length > 0) {\r\n                    setShowData(true);\r\n                  } else {\r\n                    setShowData(false);\r\n                  }\r\n                }, 2);\r\n                // setSelectedRowData(row);\r\n              }}\r\n            >\r\n              حذف\r\n            </button>\r\n          </div>\r\n        ),\r\n      },\r\n    ],\r\n  };\r\n  const KartableColumns = useMemo(\r\n    () => [kartableActionsAdmin, TitleColumns],\r\n    []\r\n  );\r\n\r\n  const validateAndSend = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let inputData = {\r\n      Title: Titel,\r\n      MeetingNumber: MeetingNumber,\r\n      InnerParticipators: InnerParticipator,\r\n      //OuterParticipators: OuterParticipator,\r\n      Location: Location,\r\n      // MeetingDate:meetingDate,\r\n      lstSubjects: contactlist,\r\n    };\r\n\r\n    // const formData = new FormData();\r\n    // formData.append('file', file);\r\n\r\n    if (\r\n      Titel &&\r\n      MeetingNumber &&\r\n      InnerParticipator &&\r\n      Location &&\r\n      meetingDate &&\r\n      contactlist\r\n    ) {\r\n      if (\r\n        contactlist.length > 0 &&\r\n        Titel.length > 1 &&\r\n        MeetingNumber.length > 1 &&\r\n        InnerParticipator.length > 1 &&\r\n        Location.length > 1\r\n      ) {\r\n        console.log('inputdata', inputData);\r\n        createOrUpdateMeeting(inputData);\r\n      }\r\n    } else {\r\n      // if (organization === null || organization === '') {\r\n      //   setisShowOrganizationError(true);\r\n      // }\r\n      // if (position === null || position === '') {\r\n      //   setisShowPositionError(true);\r\n      // }\r\n      // if (code === null || code === '') {\r\n      //   setisShowCodeError(true);\r\n      // }\r\n      // if (letterNo === null || letterNo === '') {\r\n      //   setisShowLetterNoError(true);\r\n      // }\r\n      // if (subject === null || subject === '') {\r\n      //   setisShowSubjectError(true);\r\n      // }\r\n      // if (reciever === null || reciever === '') {\r\n      //   setisShowRecieverError(true);\r\n      // }\r\n      // if (department === null || department === '') {\r\n      //   setisShowDepartmentError(true);\r\n      // }\r\n    }\r\n  };\r\n  const onChanged = (e, Type, maxNum) => {\r\n    switch (Type) {\r\n      case 'tracingResponsible':\r\n        // setShowError(false);\r\n        if (e.target.value.length > maxNum)\r\n          e.target.value = e.target.value.slice(0, maxNum);\r\n        //  setIsChangeTel(true);\r\n        setTracingResponsible(e.target.value);\r\n        break;\r\n      case 'tracingResponsibleEdit':\r\n        // setShowError(false);\r\n        if (e.target.value.length > maxNum)\r\n          e.target.value = e.target.value.slice(0, maxNum);\r\n        //  setIsChangeTel(true);\r\n        setTracingResponsibleEdit(e.target.value);\r\n        break;\r\n      case 'subjectEdit':\r\n        // setShowError(false);\r\n        if (e.target.value.length > maxNum)\r\n          e.target.value = e.target.value.slice(0, maxNum);\r\n        //  setIsChangeTel(true);\r\n        setSubjectEdit(e.target.value);\r\n        break;\r\n      case 'endDateEdit':\r\n        // setShowError(false);\r\n        if (e.target.value.length > maxNum)\r\n          e.target.value = e.target.value.slice(0, maxNum);\r\n        //  setIsChangeTel(true);\r\n        setEndDateEdit(e.target.value);\r\n        break;\r\n      case 'meetingSubTitle':\r\n        // setShowError(false);\r\n        if (e.target.value.length > maxNum)\r\n          e.target.value = e.target.value.slice(0, maxNum);\r\n        // setIsChangeDirectPhone(true);\r\n        setMeetingSubTitle(e.target.value);\r\n        break;\r\n      case 'Titel':\r\n        // setShowError(false);\r\n        if (e.target.value.length > maxNum)\r\n          e.target.value = e.target.value.slice(0, maxNum);\r\n        // setIsChangeDirectPhone(true);\r\n        setTitle(e.target.value);\r\n        break;\r\n      case 'MeetingNumber':\r\n        // setShowError(false);\r\n        if (e.target.value.length > maxNum)\r\n          e.target.value = e.target.value.slice(0, maxNum);\r\n        // setIsChangeDirectPhone(true);\r\n        setMeetingNumber(e.target.value);\r\n        break;\r\n      case 'InnerParticipator':\r\n        // setShowError(false);\r\n        if (e.target.value.length > maxNum)\r\n          e.target.value = e.target.value.slice(0, maxNum);\r\n        // setIsChangeDirectPhone(true);\r\n        setInnerParticipator(e.target.value);\r\n        break;\r\n      case 'Location':\r\n        // setShowError(false);\r\n        if (e.target.value.length > maxNum)\r\n          e.target.value = e.target.value.slice(0, maxNum);\r\n        // setIsChangeDirectPhone(true);\r\n        setLocation(e.target.value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const insertToSubjects = async () => {\r\n    setTimeout(() => {\r\n      setShowData(false);\r\n    }, 1);\r\n    let subjects = contactlist;\r\n    let subjectOfMeeting = {\r\n      Subject: meetingSubTitle,\r\n      tracingResponsible: tracingResponsible,\r\n      endDate: endDate.year + '/' + endDate.month + '/' + endDate.day,\r\n      id: contactlist.length + 1,\r\n    };\r\n    subjects.push(subjectOfMeeting);\r\n    setContactList(subjects);\r\n    setEndDate(null);\r\n    setMeetingSubTitle('');\r\n    setTracingResponsible('');\r\n\r\n    if (contactlist.length > 0) {\r\n      setTimeout(() => {\r\n        setShowData(true);\r\n      }, 1);\r\n    } else {\r\n      setTimeout(() => {\r\n        setShowData(false);\r\n      }, 1);\r\n    }\r\n    console.log(contactlist);\r\n  };\r\n  const updateItemInList = async () => {\r\n    setTimeout(() => {\r\n      setShowData(false);\r\n    }, 1);\r\n    let updateSubject = contactlist.filter((o) => {\r\n      return o.id == id;\r\n    });\r\n    if (updateSubject != null && updateSubject.length > 0) {\r\n      updateSubject[0].Subject = subjectEdit;\r\n      updateSubject[0].tracingResponsible = tracingResponsibleEdit;\r\n      updateSubject[0].endDate = endDateEdit;\r\n    }\r\n    console.log('updateSubject', updateSubject);\r\n\r\n    setEndDateEdit(null);\r\n    setTracingResponsibleEdit('');\r\n    setSubjectEdit('');\r\n\r\n    if (contactlist.length > 0) {\r\n      setTimeout(() => {\r\n        setShowData(true);\r\n      }, 1);\r\n    } else {\r\n      setTimeout(() => {\r\n        setShowData(false);\r\n      }, 1);\r\n    }\r\n    console.log(contactlist);\r\n  };\r\n\r\n  return (\r\n    <div className='mt-5'>\r\n      {/* // */}\r\n      <div\r\n        // className='modal fade bd-example-modal-lg'\r\n        className='modal fade modal21'\r\n        tabIndex='-1'\r\n        role='dialog'\r\n        aria-labelledby='myLargeModalLabel'\r\n        aria-hidden='true'\r\n      >\r\n        <div className='modal-dialog modal-lg'>\r\n          <div className='modal-content'>\r\n            <div className='modal-header'>\r\n              <h5 className='modal-title' id='exampleModalLabel'>\r\n                ویرایش\r\n              </h5>\r\n              <button\r\n                type='button'\r\n                className='close'\r\n                data-dismiss='modal'\r\n                aria-label='Close'\r\n              >\r\n                <span aria-hidden='true'>&times;</span>\r\n              </button>\r\n            </div>\r\n            <div className='modal-body'>\r\n              <form>\r\n                <div className='form-group'>\r\n                  <label className='col-form-label'></label>\r\n                  موضوع\r\n                  <input\r\n                    type='text'\r\n                    value={subjectEdit ? subjectEdit : ''}\r\n                    onChange={(e) => {\r\n                      onChanged(e, 'subjectEdit', 900);\r\n                    }}\r\n                    className='text-center form-control'\r\n                    id='recipient-name'\r\n                  />\r\n                  {/* {showdpError && <label key='9'>*</label>} */}\r\n                </div>\r\n                <div className='form-group'>\r\n                  <label htmlFor='message-text' className='col-form-label'>\r\n                    مسوول پیگیری\r\n                  </label>\r\n                  <input\r\n                    type='text'\r\n                    value={tracingResponsibleEdit ? tracingResponsibleEdit : ''}\r\n                    onChange={(e) => {\r\n                      onChanged(e, 'tracingResponsibleEdit', 900);\r\n                    }}\r\n                    className='text-center form-control'\r\n                  />\r\n                  {/* {showtelError && <label key='9'>*</label>} */}\r\n                </div>\r\n                <div className='form-group'>\r\n                  <label htmlFor='message-text' className='col-form-label'>\r\n                    مهلت انجام\r\n                  </label>\r\n                  <input\r\n                    type='text'\r\n                    value={endDateEdit ? endDateEdit : ''}\r\n                    onChange={(e) => {\r\n                      onChanged(e, 'endDateEdit', 900);\r\n                    }}\r\n                    className='text-center form-control'\r\n                  />\r\n                  {/* {showtelError && <label key='9'>*</label>} */}\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <div className='text-center'>\r\n              <button\r\n                type='button'\r\n                className='btn btn-secondary'\r\n                data-dismiss='modal'\r\n                // onClick={changeStateByRefreshChild}\r\n              >\r\n                بستن\r\n              </button>\r\n              <button\r\n                type='button'\r\n                className='btn btn-primary'\r\n                data-dismiss='modal'\r\n                onClick={(e) => updateItemInList(e)}\r\n              >\r\n                ذخیره تغییرات\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* /// */}\r\n\r\n      <form>\r\n        <div className='form-row' style={{ direction: 'rtl' }}>\r\n          <label\r\n            htmlFor='meetingTitle'\r\n            className='col-1 col-form-label forLable'\r\n          >\r\n            عنوان جلسه:\r\n          </label>\r\n          <div className='col-5'>\r\n            <input\r\n              type='text'\r\n              className='form-control'\r\n              id='meetingTitle'\r\n              value={Titel ? Titel : ''}\r\n              onChange={(e) => {\r\n                onChanged(e, 'Titel', 900);\r\n              }}\r\n            />\r\n          </div>\r\n          <label\r\n            htmlFor='meetingNumber'\r\n            className='col-1 col-form-label forLable '\r\n          >\r\n            شماره جلسه:\r\n          </label>\r\n          <div className='col-1'>\r\n            <input\r\n              type='text'\r\n              className='form-control'\r\n              id='meetingNumber'\r\n              value={MeetingNumber ? MeetingNumber : ''}\r\n              onChange={(e) => {\r\n                onChanged(e, 'MeetingNumber', 900);\r\n              }}\r\n            />\r\n          </div>\r\n          <label\r\n            htmlFor='inputPassword4'\r\n            className='col-1 col-form-label forLable text-left '\r\n          >\r\n            تاریخ:\r\n          </label>\r\n          <div className='col-2 text-right'>\r\n            <DatePicker\r\n              calendarClassName='responsive-calendar' // added this\r\n              value={meetingDate}\r\n              onChange={setMeetingDate}\r\n              inputPlaceholder='تاریخ را انتخاب نمایید'\r\n              shouldHighlightWeekends\r\n              locale='fa' // add this\r\n            />\r\n          </div>\r\n          <label\r\n            htmlFor='inputPassword4'\r\n            className='col-1 col-form-label forLable '\r\n          ></label>\r\n        </div>\r\n\r\n        <div className='form-row mt-2' style={{ direction: 'rtl' }}>\r\n          <label htmlFor='participators' className='col-1 col-form-label'>\r\n            شرکت کنندگان:\r\n          </label>\r\n          <div className='col-8'>\r\n            <input\r\n              type='text'\r\n              className='form-control'\r\n              id='participators'\r\n              value={InnerParticipator ? InnerParticipator : ''}\r\n              onChange={(e) => {\r\n                onChanged(e, 'InnerParticipator', 900);\r\n              }}\r\n            />\r\n          </div>\r\n          <label\r\n            htmlFor='meetingLocation'\r\n            className='col-1 col-form-label forLable '\r\n          >\r\n            محل تشکیل جلسه:\r\n          </label>\r\n          <div className='col-2 '>\r\n            <input\r\n              type='text'\r\n              className='form-control w-75'\r\n              id='meetingLocation'\r\n              value={Location ? Location : ''}\r\n              onChange={(e) => {\r\n                onChanged(e, 'Location', 900);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='form-row mt-2' style={{ direction: 'rtl' }}>\r\n          <label\r\n            htmlFor='participators'\r\n            className='col-12 col-form-label text-center font-weight-bold'\r\n          >\r\n            موضوعات مطرح شده در جلسه\r\n          </label>\r\n        </div>\r\n        <div className='form-row' style={{ direction: 'rtl' }}>\r\n          <label\r\n            htmlFor='meetingTitle'\r\n            className='col-1 col-form-label forLable'\r\n          >\r\n            موضوع:\r\n          </label>\r\n          <div className='col-5'>\r\n            <input\r\n              type='text'\r\n              className='form-control'\r\n              id='meetingSubTitle'\r\n              value={meetingSubTitle}\r\n              onChange={(e) => onChanged(e, 'meetingSubTitle', 900)}\r\n              // placeholder='عنوان جلسه'\r\n            />\r\n          </div>\r\n          <label\r\n            htmlFor='meetingNumber'\r\n            className='col-1 col-form-label forLable '\r\n          >\r\n            مسوول پیگیری:\r\n          </label>\r\n          <div className='col-1'>\r\n            <input\r\n              type='text'\r\n              className='form-control'\r\n              id='tracingResponsible'\r\n              value={tracingResponsible}\r\n              onChange={(e) => onChanged(e, 'tracingResponsible', 900)}\r\n              // placeholder='شماره جلسه'\r\n            />\r\n          </div>\r\n          <label\r\n            htmlFor='inputPassword4'\r\n            className='col-1 col-form-label forLable text-left '\r\n          >\r\n            مهلت انجام:\r\n          </label>\r\n          <div className='col-2 text-right'>\r\n            <DatePicker\r\n              calendarClassName='responsive-calendar' // added this\r\n              value={endDate}\r\n              onChange={setEndDate}\r\n              inputPlaceholder='تاریخ را انتخاب نمایید'\r\n              shouldHighlightWeekends\r\n              locale='fa' // add this\r\n            />\r\n          </div>\r\n          <label\r\n            htmlFor='inputPassword4'\r\n            className='col-1 col-form-label forLable '\r\n          >\r\n            <button\r\n              type='button'\r\n              onClick={insertToSubjects}\r\n              className='btn btn-secondary ml-2  forLable'\r\n            >\r\n              ثبت موضوع\r\n            </button>\r\n          </label>\r\n        </div>\r\n        <div className='form-row m-3' style={{ direction: 'rtl' }}>\r\n          {showData ? (\r\n            <CustomTable columns={KartableColumns} data={contactlist} />\r\n          ) : null}\r\n        </div>\r\n\r\n        <button\r\n          type='submit'\r\n          className='btn btn-primary mt-2 ml-3 forLable'\r\n          onClick={(e) => {\r\n            validateAndSend(e);\r\n          }}\r\n        >\r\n          ثبت\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateSummaryOfMeeting;\r\n","E:\\Moshanir\\meeting\\src\\Component\\Common\\CustomTable.js",["67","68","69","70","71","72","73","74","75","76","77","78","79","80","81"],"import React, { useEffect } from 'react';\r\nimport '../../css/CustomTable.css';\r\nimport styled from 'styled-components';\r\nimport {\r\n  useTable,\r\n  usePagination,\r\n  useSortBy,\r\n  useFilters,\r\n  useGroupBy,\r\n  useExpanded,\r\n  useRowSelect,\r\n} from 'react-table';\r\nimport matchSorter from 'match-sorter';\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n\r\n    td {\r\n      input {\r\n        font-size: 1rem;\r\n        padding: 0;\r\n        margin: 0;\r\n        border: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pagination {\r\n    padding: 0.5rem;\r\n  }\r\n`;\r\n\r\n// Create an editable cell renderer\r\nconst EditableCell = ({\r\n  value: initialValue,\r\n  row: { index },\r\n  column: { id },\r\n  updateMyData, // This is a custom function that we supplied to our table instance\r\n  editable,\r\n}) => {\r\n  // We need to keep and update the state of the cell normally\r\n  const [value, setValue] = React.useState(initialValue);\r\n\r\n  const onChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  // We'll only update the external data when the input is blurred\r\n  const onBlur = () => {\r\n    //\tupdateMyData(index, id, value);\r\n  };\r\n\r\n  // If the initialValue is changed externall, sync it up with our state\r\n  React.useEffect(() => {\r\n    setValue(initialValue);\r\n  }, [initialValue]);\r\n\r\n  if (!editable) {\r\n    return `${initialValue}`;\r\n  }\r\n\r\n  return <input value={value} onChange={onChange} onBlur={onBlur} />;\r\n};\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length;\r\n\r\n  return (\r\n    <input\r\n      className='forSearch'\r\n      value={filterValue || ''}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`جستجو`}\r\n    />\r\n  );\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set();\r\n    preFilteredRows.forEach((row) => {\r\n      options.add(row.values[id]);\r\n    });\r\n    return [...options.values()];\r\n  }, [id, preFilteredRows]);\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select\r\n      value={filterValue}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n    >\r\n      <option value=''>All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\n\r\n// This is a custom filter UI that uses a\r\n// slider to set the filter value between a column's\r\n// min and max values\r\nfunction SliderColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the min and max\r\n  // using the preFilteredRows\r\n\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type='range'\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={(e) => {\r\n          setFilter(parseInt(e.target.value, 10));\r\n        }}\r\n      />\r\n      <button onClick={() => setFilter(undefined)}>Off</button>\r\n    </>\r\n  );\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || ''}\r\n        type='number'\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            val ? parseInt(val, 10) : undefined,\r\n            old[1],\r\n          ]);\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n        value={filterValue[1] || ''}\r\n        type='number'\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            old[0],\r\n            val ? parseInt(val, 10) : undefined,\r\n          ]);\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = (val) => !val;\r\n\r\n// Be sure to pass our updateMyData and the skipReset option\r\nfunction CustomTable({ columns, data, updateMyData, pc, skipReset }) {\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter((row) => {\r\n          const rowValue = row.values[id];\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLowerCase()\r\n                .startsWith(String(filterValue).toLowerCase())\r\n            : true;\r\n        });\r\n      },\r\n    }),\r\n    []\r\n  );\r\n  useEffect(() => {\r\n    setPageSize(12);\r\n    // updateMyData({ pageIndex, pageSize });\r\n  }, []);\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n      // And also our default editable cell\r\n      //Cell: EditableCell,\r\n    }),\r\n    []\r\n  );\r\n  const setpagesize = () => {};\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    // which has only the rows for the active page\r\n\r\n    // The rest of these things are super handy, too ;)\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: {\r\n      pageIndex,\r\n      pageSize,\r\n      sortBy,\r\n      groupBy,\r\n      expanded,\r\n      filters,\r\n      selectedRowIds,\r\n    },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n      filterTypes,\r\n      pageSize: 15,\r\n      // manualPagination: true,\r\n      // updateMyData isn't part of the API, but\r\n      // anything we put into these options will\r\n      // automatically be available on the instance.\r\n      // That way we can call this function from our\r\n      // cell renderer!\r\n      //updateMyData,\r\n      // We also need to pass this so the page doesn't change\r\n      // when we edit the data.\r\n      autoResetPage: !skipReset,\r\n      autoResetSelectedRows: !skipReset,\r\n      disableMultiSort: true,\r\n    },\r\n    useFilters,\r\n    useGroupBy,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination,\r\n    useRowSelect,\r\n    setpagesize\r\n  );\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <div className='scroll rtlDir ' style={{ width: '100vw' }}>\r\n      <table {...getTableProps()} className='striped highlight w-100'>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>\r\n                  <div>\r\n                    {column.canGroupBy ? (\r\n                      // If the column can be grouped, let's add a toggle\r\n                      <span {...column.getGroupByToggleProps()}>\r\n                        {/* {column.isGrouped ? \"🛑 \" : \"+\"} */}\r\n                      </span>\r\n                    ) : null}\r\n                    <span {...column.getSortByToggleProps()}>\r\n                      {column.render('Header')}\r\n                      {/* Add a sort direction indicator */}\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? ' 🔽'\r\n                          : ' 🔼'\r\n                        : ''}\r\n                    </span>\r\n                  </div>\r\n                  {/* Render the columns filter UI */}\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()} className='trheight'>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>\r\n                      {cell.isGrouped ? (\r\n                        // If it's a grouped cell, add an expander and row count\r\n                        <>\r\n                          <span {...row.getToggleRowExpandedProps()}>\r\n                            {row.isExpanded ? '+' : '-'}\r\n                          </span>{' '}\r\n                          {cell.render('Cell', { editable: false })} (\r\n                          {row.subRows.length})\r\n                        </>\r\n                      ) : cell.isAggregated ? (\r\n                        // If the cell is aggregated, use the Aggregated\r\n                        // renderer for cell\r\n                        cell.render('Aggregated')\r\n                      ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\r\n                        // Otherwise, just render the regular cell\r\n                        cell.render('Cell', { editable: true })\r\n                      )}\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      {/*\r\n        Pagination can be built however you'd like.\r\n        This is just a very basic UI implementation:\r\n      */}\r\n      <div className='pagination'>\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span className='m-3'>\r\n          صفحه{' '}\r\n          <strong>\r\n            {pageIndex + 1} از {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        {/* <span>\r\n          |\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={(e) => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n              gotoPage(page);\r\n            }}\r\n            style={{ width: \"20px\" }}\r\n          />\r\n          رفتن به صفحه{\" \"}\r\n        </span>{\" \"} */}\r\n        {/* <select\r\n          className=\"ml-5\"\r\n          value={pageSize}\r\n          onChange={(e) => {\r\n            setPageSize(Number(e.target.value));\r\n          }}\r\n        >\r\n          {[10, 15, 30, 40, 50].map((pageSize) => (\r\n            <option key={pageSize} value={pageSize}>\r\n              نمایش {pageSize}\r\n            </option>\r\n          ))}\r\n        </select> */}\r\n      </div>\r\n      {/* <pre>\r\n\t\t\t\t<code>\r\n\t\t\t\t\t{JSON.stringify(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpageIndex,\r\n\t\t\t\t\t\t\tpageSize,\r\n\t\t\t\t\t\t\tpageCount,\r\n\t\t\t\t\t\t\tcanNextPage,\r\n\t\t\t\t\t\t\tcanPreviousPage,\r\n\t\t\t\t\t\t\tsortBy,\r\n\t\t\t\t\t\t\tgroupBy,\r\n\t\t\t\t\t\t\texpanded: expanded,\r\n\t\t\t\t\t\t\tfilters,\r\n\t\t\t\t\t\t\tselectedRowIds: selectedRowIds,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t2\r\n\t\t\t\t\t)}\r\n\t\t\t\t</code>\r\n\t\t\t</pre> */}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Define a custom filter filter function!\r\nfunction filterGreaterThan(rows, id, filterValue) {\r\n  return rows.filter((row) => {\r\n    const rowValue = row.values[id];\r\n    return rowValue >= filterValue;\r\n  });\r\n}\r\n\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = (val) => typeof val !== 'number';\r\n\r\n// This is a custom aggregator that\r\n// takes in an array of leaf values and\r\n// returns the rounded median\r\nfunction roundedMedian(leafValues) {\r\n  let min = leafValues[0] || 0;\r\n  let max = leafValues[0] || 0;\r\n\r\n  leafValues.forEach((value) => {\r\n    min = Math.min(min, value);\r\n    max = Math.max(max, value);\r\n  });\r\n\r\n  return Math.round((min + max) / 2);\r\n}\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef();\r\n    const resolvedRef = ref || defaultRef;\r\n\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate;\r\n    }, [resolvedRef, indeterminate]);\r\n\r\n    return (\r\n      <>\r\n        <input type='checkbox' ref={resolvedRef} {...rest} />\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default CustomTable;\r\n","E:\\Moshanir\\meeting\\src\\Component\\Common\\Columns.js",[],"E:\\Moshanir\\meeting\\src\\Context\\meetingContext.js",[],"E:\\Moshanir\\meeting\\src\\Context\\meetingState.js",["82","83"],"E:\\Moshanir\\meeting\\src\\Constant\\constant.js",[],"E:\\Moshanir\\meeting\\src\\Context\\meetingReducer.js",[],"E:\\Moshanir\\meeting\\src\\Context\\types.js",[],{"ruleId":"84","severity":1,"message":"85","line":1,"column":8,"nodeType":"86","messageId":"87","endLine":1,"endColumn":12},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":8,"column":7,"nodeType":"94","endLine":8,"endColumn":75},{"ruleId":"84","severity":1,"message":"95","line":20,"column":10,"nodeType":"86","messageId":"87","endLine":20,"endColumn":21},{"ruleId":"84","severity":1,"message":"96","line":28,"column":9,"nodeType":"86","messageId":"87","endLine":28,"endColumn":21},{"ruleId":"84","severity":1,"message":"97","line":41,"column":9,"nodeType":"86","messageId":"87","endLine":41,"endColumn":27},{"ruleId":"98","severity":1,"message":"99","line":105,"column":5,"nodeType":"100","endLine":105,"endColumn":7,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":270,"column":19,"nodeType":"104","messageId":"105","endLine":270,"endColumn":21},{"ruleId":"84","severity":1,"message":"106","line":15,"column":7,"nodeType":"86","messageId":"87","endLine":15,"endColumn":13},{"ruleId":"84","severity":1,"message":"107","line":58,"column":7,"nodeType":"86","messageId":"87","endLine":58,"endColumn":19},{"ruleId":"84","severity":1,"message":"108","line":93,"column":9,"nodeType":"86","messageId":"87","endLine":93,"endColumn":14},{"ruleId":"84","severity":1,"message":"109","line":109,"column":10,"nodeType":"86","messageId":"87","endLine":109,"endColumn":28},{"ruleId":"84","severity":1,"message":"110","line":143,"column":10,"nodeType":"86","messageId":"87","endLine":143,"endColumn":28},{"ruleId":"84","severity":1,"message":"111","line":178,"column":10,"nodeType":"86","messageId":"87","endLine":178,"endColumn":33},{"ruleId":"98","severity":1,"message":"112","line":265,"column":6,"nodeType":"100","endLine":265,"endColumn":8,"suggestions":"113"},{"ruleId":"84","severity":1,"message":"114","line":297,"column":7,"nodeType":"86","messageId":"87","endLine":297,"endColumn":15},{"ruleId":"84","severity":1,"message":"115","line":298,"column":7,"nodeType":"86","messageId":"87","endLine":298,"endColumn":13},{"ruleId":"84","severity":1,"message":"116","line":299,"column":7,"nodeType":"86","messageId":"87","endLine":299,"endColumn":14},{"ruleId":"84","severity":1,"message":"117","line":300,"column":7,"nodeType":"86","messageId":"87","endLine":300,"endColumn":15},{"ruleId":"84","severity":1,"message":"118","line":301,"column":7,"nodeType":"86","messageId":"87","endLine":301,"endColumn":14},{"ruleId":"84","severity":1,"message":"119","line":302,"column":7,"nodeType":"86","messageId":"87","endLine":302,"endColumn":21},{"ruleId":"84","severity":1,"message":"120","line":490,"column":10,"nodeType":"86","messageId":"87","endLine":490,"endColumn":23},{"ruleId":"84","severity":1,"message":"121","line":502,"column":7,"nodeType":"86","messageId":"87","endLine":502,"endColumn":28},{"ruleId":"84","severity":1,"message":"122","line":5,"column":10,"nodeType":"86","messageId":"87","endLine":5,"endColumn":16},{"ruleId":"84","severity":1,"message":"123","line":5,"column":18,"nodeType":"86","messageId":"87","endLine":5,"endColumn":24},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["124"],"no-negated-in-lhs",["125"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'selectedRow' is assigned a value but never used.","'persianToday' is assigned a value but never used.","'setSelectedRowData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'kartableActionsAdmin'. Either include it or remove the dependency array.","ArrayExpression",["126"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Styles' is assigned a value but never used.","'EditableCell' is assigned a value but never used.","'count' is assigned a value but never used.","'SelectColumnFilter' is defined but never used.","'SliderColumnFilter' is defined but never used.","'NumberRangeColumnFilter' is defined but never used.","React Hook useEffect has a missing dependency: 'setPageSize'. Either include it or remove the dependency array.",["127"],"'pageSize' is assigned a value but never used.","'sortBy' is assigned a value but never used.","'groupBy' is assigned a value but never used.","'expanded' is assigned a value but never used.","'filters' is assigned a value but never used.","'selectedRowIds' is assigned a value but never used.","'roundedMedian' is defined but never used.","'IndeterminateCheckbox' is assigned a value but never used.","'encode' is defined but never used.","'decode' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [kartableActionsAdmin]",{"range":"132","text":"133"},"Update the dependencies array to be: [setPageSize]",{"range":"134","text":"135"},[3758,3760],"[kartableActionsAdmin]",[6682,6684],"[setPageSize]"]