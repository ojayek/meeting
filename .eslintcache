[{"E:\\Moshanir\\meeting\\src\\App.js":"1","E:\\Moshanir\\meeting\\src\\index.js":"2","E:\\Moshanir\\meeting\\src\\Component\\NotFound.js":"3","E:\\Moshanir\\meeting\\src\\Component\\Common\\Loader.js":"4","E:\\Moshanir\\meeting\\src\\Component\\Home.js":"5","E:\\Moshanir\\meeting\\src\\Component\\CreateSummaryOfMeeting.js":"6","E:\\Moshanir\\meeting\\src\\Component\\Common\\CustomTable.js":"7","E:\\Moshanir\\meeting\\src\\Component\\Common\\Columns.js":"8"},{"size":766,"mtime":1611220058760,"results":"9","hashOfConfig":"10"},{"size":491,"mtime":1611218275846,"results":"11","hashOfConfig":"10"},{"size":286,"mtime":1606564027453,"results":"12","hashOfConfig":"10"},{"size":258,"mtime":1611992699555,"results":"13","hashOfConfig":"10"},{"size":271,"mtime":1611220012920,"results":"14","hashOfConfig":"10"},{"size":15477,"mtime":1612433182240,"results":"15","hashOfConfig":"10"},{"size":14501,"mtime":1609588122759,"results":"16","hashOfConfig":"10"},{"size":475,"mtime":1611827035123,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"lgxdya",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"E:\\Moshanir\\meeting\\src\\App.js",["38"],"import logo from './logo.svg';\nimport './css/App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Switch, Route } from 'react-router-dom';\nimport NotFound from './Component/NotFound';\nimport CreateForm from './Component/CreateSummaryOfMeeting';\n\nimport Loader from './Component/Common/Loader';\nimport Home from './Component/Home';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <BrowserRouter basename='/'>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route exact path='/CreateForm' component={CreateForm} />\n\n          <Route exact path='/loader' component={Loader} />\n\n          <Route path='/' component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n",["39","40"],"E:\\Moshanir\\meeting\\src\\index.js",[],"E:\\Moshanir\\meeting\\src\\Component\\NotFound.js",[],"E:\\Moshanir\\meeting\\src\\Component\\Common\\Loader.js",["41"],"import React from 'react';\r\nimport spinner from '../../images/spinner.gif';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div>\r\n      \r\n      <img src={spinner} className='card bg-info text-center card-form' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","E:\\Moshanir\\meeting\\src\\Component\\Home.js",[],"E:\\Moshanir\\meeting\\src\\Component\\CreateSummaryOfMeeting.js",["42","43","44","45","46"],"E:\\Moshanir\\meeting\\src\\Component\\Common\\CustomTable.js",["47","48","49","50","51","52","53","54","55","56","57","58","59","60","61"],"import React, { useEffect } from 'react';\r\nimport '../../css/CustomTable.css';\r\nimport styled from 'styled-components';\r\nimport {\r\n  useTable,\r\n  usePagination,\r\n  useSortBy,\r\n  useFilters,\r\n  useGroupBy,\r\n  useExpanded,\r\n  useRowSelect,\r\n} from 'react-table';\r\nimport matchSorter from 'match-sorter';\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n\r\n    td {\r\n      input {\r\n        font-size: 1rem;\r\n        padding: 0;\r\n        margin: 0;\r\n        border: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pagination {\r\n    padding: 0.5rem;\r\n  }\r\n`;\r\n\r\n// Create an editable cell renderer\r\nconst EditableCell = ({\r\n  value: initialValue,\r\n  row: { index },\r\n  column: { id },\r\n  updateMyData, // This is a custom function that we supplied to our table instance\r\n  editable,\r\n}) => {\r\n  // We need to keep and update the state of the cell normally\r\n  const [value, setValue] = React.useState(initialValue);\r\n\r\n  const onChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  // We'll only update the external data when the input is blurred\r\n  const onBlur = () => {\r\n    //\tupdateMyData(index, id, value);\r\n  };\r\n\r\n  // If the initialValue is changed externall, sync it up with our state\r\n  React.useEffect(() => {\r\n    setValue(initialValue);\r\n  }, [initialValue]);\r\n\r\n  if (!editable) {\r\n    return `${initialValue}`;\r\n  }\r\n\r\n  return <input value={value} onChange={onChange} onBlur={onBlur} />;\r\n};\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n  const count = preFilteredRows.length;\r\n\r\n  return (\r\n    <input\r\n      className='forSearch'\r\n      value={filterValue || ''}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={`جستجو`}\r\n    />\r\n  );\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the options for filtering\r\n  // using the preFilteredRows\r\n  const options = React.useMemo(() => {\r\n    const options = new Set();\r\n    preFilteredRows.forEach((row) => {\r\n      options.add(row.values[id]);\r\n    });\r\n    return [...options.values()];\r\n  }, [id, preFilteredRows]);\r\n\r\n  // Render a multi-select box\r\n  return (\r\n    <select\r\n      value={filterValue}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n    >\r\n      <option value=''>All</option>\r\n      {options.map((option, i) => (\r\n        <option key={i} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\n\r\n// This is a custom filter UI that uses a\r\n// slider to set the filter value between a column's\r\n// min and max values\r\nfunction SliderColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n  // Calculate the min and max\r\n  // using the preFilteredRows\r\n\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type='range'\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={(e) => {\r\n          setFilter(parseInt(e.target.value, 10));\r\n        }}\r\n      />\r\n      <button onClick={() => setFilter(undefined)}>Off</button>\r\n    </>\r\n  );\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    preFilteredRows.forEach((row) => {\r\n      min = Math.min(row.values[id], min);\r\n      max = Math.max(row.values[id], max);\r\n    });\r\n    return [min, max];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || ''}\r\n        type='number'\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            val ? parseInt(val, 10) : undefined,\r\n            old[1],\r\n          ]);\r\n        }}\r\n        placeholder={`Min (${min})`}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n      to\r\n      <input\r\n        value={filterValue[1] || ''}\r\n        type='number'\r\n        onChange={(e) => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [\r\n            old[0],\r\n            val ? parseInt(val, 10) : undefined,\r\n          ]);\r\n        }}\r\n        placeholder={`Max (${max})`}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = (val) => !val;\r\n\r\n// Be sure to pass our updateMyData and the skipReset option\r\nfunction CustomTable({ columns, data, updateMyData, pc, skipReset }) {\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        return rows.filter((row) => {\r\n          const rowValue = row.values[id];\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n                .toLowerCase()\r\n                .startsWith(String(filterValue).toLowerCase())\r\n            : true;\r\n        });\r\n      },\r\n    }),\r\n    []\r\n  );\r\n  useEffect(() => {\r\n    setPageSize(12);\r\n    // updateMyData({ pageIndex, pageSize });\r\n  }, []);\r\n\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      // Let's set up our default Filter UI\r\n      Filter: DefaultColumnFilter,\r\n      // And also our default editable cell\r\n      //Cell: EditableCell,\r\n    }),\r\n    []\r\n  );\r\n  const setpagesize = () => {};\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    // which has only the rows for the active page\r\n\r\n    // The rest of these things are super handy, too ;)\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: {\r\n      pageIndex,\r\n      pageSize,\r\n      sortBy,\r\n      groupBy,\r\n      expanded,\r\n      filters,\r\n      selectedRowIds,\r\n    },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n      filterTypes,\r\n      pageSize: 15,\r\n      // manualPagination: true,\r\n      // updateMyData isn't part of the API, but\r\n      // anything we put into these options will\r\n      // automatically be available on the instance.\r\n      // That way we can call this function from our\r\n      // cell renderer!\r\n      //updateMyData,\r\n      // We also need to pass this so the page doesn't change\r\n      // when we edit the data.\r\n      autoResetPage: !skipReset,\r\n      autoResetSelectedRows: !skipReset,\r\n      disableMultiSort: true,\r\n    },\r\n    useFilters,\r\n    useGroupBy,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination,\r\n    useRowSelect,\r\n    setpagesize\r\n  );\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <div className='scroll rtlDir ' style={{ width: '100vw' }}>\r\n      <table {...getTableProps()} className='striped highlight w-100'>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>\r\n                  <div>\r\n                    {column.canGroupBy ? (\r\n                      // If the column can be grouped, let's add a toggle\r\n                      <span {...column.getGroupByToggleProps()}>\r\n                        {/* {column.isGrouped ? \"🛑 \" : \"+\"} */}\r\n                      </span>\r\n                    ) : null}\r\n                    <span {...column.getSortByToggleProps()}>\r\n                      {column.render('Header')}\r\n                      {/* Add a sort direction indicator */}\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? ' 🔽'\r\n                          : ' 🔼'\r\n                        : ''}\r\n                    </span>\r\n                  </div>\r\n                  {/* Render the columns filter UI */}\r\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()} className='trheight'>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>\r\n                      {cell.isGrouped ? (\r\n                        // If it's a grouped cell, add an expander and row count\r\n                        <>\r\n                          <span {...row.getToggleRowExpandedProps()}>\r\n                            {row.isExpanded ? '+' : '-'}\r\n                          </span>{' '}\r\n                          {cell.render('Cell', { editable: false })} (\r\n                          {row.subRows.length})\r\n                        </>\r\n                      ) : cell.isAggregated ? (\r\n                        // If the cell is aggregated, use the Aggregated\r\n                        // renderer for cell\r\n                        cell.render('Aggregated')\r\n                      ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\r\n                        // Otherwise, just render the regular cell\r\n                        cell.render('Cell', { editable: true })\r\n                      )}\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      {/*\r\n        Pagination can be built however you'd like.\r\n        This is just a very basic UI implementation:\r\n      */}\r\n      <div className='pagination'>\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span className='m-3'>\r\n          صفحه{' '}\r\n          <strong>\r\n            {pageIndex + 1} از {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        {/* <span>\r\n          |\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={(e) => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n              gotoPage(page);\r\n            }}\r\n            style={{ width: \"20px\" }}\r\n          />\r\n          رفتن به صفحه{\" \"}\r\n        </span>{\" \"} */}\r\n        {/* <select\r\n          className=\"ml-5\"\r\n          value={pageSize}\r\n          onChange={(e) => {\r\n            setPageSize(Number(e.target.value));\r\n          }}\r\n        >\r\n          {[10, 15, 30, 40, 50].map((pageSize) => (\r\n            <option key={pageSize} value={pageSize}>\r\n              نمایش {pageSize}\r\n            </option>\r\n          ))}\r\n        </select> */}\r\n      </div>\r\n      {/* <pre>\r\n\t\t\t\t<code>\r\n\t\t\t\t\t{JSON.stringify(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpageIndex,\r\n\t\t\t\t\t\t\tpageSize,\r\n\t\t\t\t\t\t\tpageCount,\r\n\t\t\t\t\t\t\tcanNextPage,\r\n\t\t\t\t\t\t\tcanPreviousPage,\r\n\t\t\t\t\t\t\tsortBy,\r\n\t\t\t\t\t\t\tgroupBy,\r\n\t\t\t\t\t\t\texpanded: expanded,\r\n\t\t\t\t\t\t\tfilters,\r\n\t\t\t\t\t\t\tselectedRowIds: selectedRowIds,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t2\r\n\t\t\t\t\t)}\r\n\t\t\t\t</code>\r\n\t\t\t</pre> */}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Define a custom filter filter function!\r\nfunction filterGreaterThan(rows, id, filterValue) {\r\n  return rows.filter((row) => {\r\n    const rowValue = row.values[id];\r\n    return rowValue >= filterValue;\r\n  });\r\n}\r\n\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = (val) => typeof val !== 'number';\r\n\r\n// This is a custom aggregator that\r\n// takes in an array of leaf values and\r\n// returns the rounded median\r\nfunction roundedMedian(leafValues) {\r\n  let min = leafValues[0] || 0;\r\n  let max = leafValues[0] || 0;\r\n\r\n  leafValues.forEach((value) => {\r\n    min = Math.min(min, value);\r\n    max = Math.max(max, value);\r\n  });\r\n\r\n  return Math.round((min + max) / 2);\r\n}\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef();\r\n    const resolvedRef = ref || defaultRef;\r\n\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate;\r\n    }, [resolvedRef, indeterminate]);\r\n\r\n    return (\r\n      <>\r\n        <input type='checkbox' ref={resolvedRef} {...rest} />\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nexport default CustomTable;\r\n","E:\\Moshanir\\meeting\\src\\Component\\Common\\Columns.js",[],{"ruleId":"62","severity":1,"message":"63","line":1,"column":8,"nodeType":"64","messageId":"65","endLine":1,"endColumn":12},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":8,"column":7,"nodeType":"72","endLine":8,"endColumn":75},{"ruleId":"62","severity":1,"message":"73","line":14,"column":10,"nodeType":"64","messageId":"65","endLine":14,"endColumn":21},{"ruleId":"62","severity":1,"message":"74","line":22,"column":9,"nodeType":"64","messageId":"65","endLine":22,"endColumn":21},{"ruleId":"62","severity":1,"message":"75","line":24,"column":9,"nodeType":"64","messageId":"65","endLine":24,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":88,"column":5,"nodeType":"78","endLine":88,"endColumn":7,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":166,"column":19,"nodeType":"82","messageId":"83","endLine":166,"endColumn":21},{"ruleId":"62","severity":1,"message":"84","line":15,"column":7,"nodeType":"64","messageId":"65","endLine":15,"endColumn":13},{"ruleId":"62","severity":1,"message":"85","line":58,"column":7,"nodeType":"64","messageId":"65","endLine":58,"endColumn":19},{"ruleId":"62","severity":1,"message":"86","line":93,"column":9,"nodeType":"64","messageId":"65","endLine":93,"endColumn":14},{"ruleId":"62","severity":1,"message":"87","line":109,"column":10,"nodeType":"64","messageId":"65","endLine":109,"endColumn":28},{"ruleId":"62","severity":1,"message":"88","line":143,"column":10,"nodeType":"64","messageId":"65","endLine":143,"endColumn":28},{"ruleId":"62","severity":1,"message":"89","line":178,"column":10,"nodeType":"64","messageId":"65","endLine":178,"endColumn":33},{"ruleId":"76","severity":1,"message":"90","line":265,"column":6,"nodeType":"78","endLine":265,"endColumn":8,"suggestions":"91"},{"ruleId":"62","severity":1,"message":"92","line":297,"column":7,"nodeType":"64","messageId":"65","endLine":297,"endColumn":15},{"ruleId":"62","severity":1,"message":"93","line":298,"column":7,"nodeType":"64","messageId":"65","endLine":298,"endColumn":13},{"ruleId":"62","severity":1,"message":"94","line":299,"column":7,"nodeType":"64","messageId":"65","endLine":299,"endColumn":14},{"ruleId":"62","severity":1,"message":"95","line":300,"column":7,"nodeType":"64","messageId":"65","endLine":300,"endColumn":15},{"ruleId":"62","severity":1,"message":"96","line":301,"column":7,"nodeType":"64","messageId":"65","endLine":301,"endColumn":14},{"ruleId":"62","severity":1,"message":"97","line":302,"column":7,"nodeType":"64","messageId":"65","endLine":302,"endColumn":21},{"ruleId":"62","severity":1,"message":"98","line":490,"column":10,"nodeType":"64","messageId":"65","endLine":490,"endColumn":23},{"ruleId":"62","severity":1,"message":"99","line":502,"column":7,"nodeType":"64","messageId":"65","endLine":502,"endColumn":28},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["100"],"no-negated-in-lhs",["101"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'selectedRow' is assigned a value but never used.","'persianToday' is assigned a value but never used.","'setSelectedRowData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'kartableActionsAdmin'. Either include it or remove the dependency array.","ArrayExpression",["102"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Styles' is assigned a value but never used.","'EditableCell' is assigned a value but never used.","'count' is assigned a value but never used.","'SelectColumnFilter' is defined but never used.","'SliderColumnFilter' is defined but never used.","'NumberRangeColumnFilter' is defined but never used.","React Hook useEffect has a missing dependency: 'setPageSize'. Either include it or remove the dependency array.",["103"],"'pageSize' is assigned a value but never used.","'sortBy' is assigned a value but never used.","'groupBy' is assigned a value but never used.","'expanded' is assigned a value but never used.","'filters' is assigned a value but never used.","'selectedRowIds' is assigned a value but never used.","'roundedMedian' is defined but never used.","'IndeterminateCheckbox' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [kartableActionsAdmin]",{"range":"108","text":"109"},"Update the dependencies array to be: [setPageSize]",{"range":"110","text":"111"},[3231,3233],"[kartableActionsAdmin]",[6682,6684],"[setPageSize]"]